# This file is meant to be overriden in deployments by a single file in all microservices
# if you change its structure, change it in all microservices.
# values here can be overriden for all microservices in this common file,
# or in specific microservices in its specific application.yml file

# default values
dbVendor=postgresql
host=localhost
port=5432
# use this to set common query parameters, and use the predefined
# '${queryBegin}' marker to put the correct leading char '?' or '&' depending
# on whether the microservice has predefined query parameters.
# for example, use this (with the ${} and all): query=${queryBegin}timeout=5&reconnect=true
query=
login=postgres
password=postgres
# use this if you want to use the preferred db name of the microservice,
# but with multiple variants, like for different environments
dbPrefix=

# these allow to customize the url construction a bit for weird jdbc connection strings
hostPort=://${host}:${port}/
dbProtocolHost=${dbApi}:${dbVendor}${hostPort}

dbFullName=${dbPrefix}${dbName}
finalQuery=${customQuery}${query}
dbManyBasesPath=${dbFullName}${finalQuery}
dbManySchemasPath=${commonDbName}?currentSchema=${dbFullName}${finalQuery}

dbUrlManyBases=${dbProtocolHost}${dbManyBasesPath}
dbUrlManySchemas=${dbProtocolHost}${dbManySchemasPath}

# leave this if you want 1 database per microservice
dbUrl=${dbUrlManyBases}
# use this if you want 1 database for all microservice, each in a schema
# and set commonDbName in database.properties, and set queryBegin: '&' and customQueryBegin: '&' in application.yaml
#dbUrl=${dbUrlManySchemas}
