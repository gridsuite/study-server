server:
  forward-headers-strategy: framework

spring:
  profiles:
    active: default,local

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 103MB
  codec:
    max-in-memory-size: 100MB

  rabbitmq:
    addresses: rabbitmq
    port: 5672

  cloud:
    function:
      definition: consumeSaResult;consumeSaStopped
    stream:
      bindings:
        publishStudyUpdate-out-0:
          destination: study.update
        consumeSaResult-in-0:
          destination: sa.result
        consumeSaStopped-in-0:
          destination: sa.stopped
      source: publishStudyUpdate
  datasource:
    url: ${dbUrl}
    username: ${login}
    password: ${password}

  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
    properties:
      dialect: org.hibernate.dialect.PostgreSQLDialect
      hibernate:
        format_sql: true
        # Used when action: create is uncommented
        hbm2ddl:
          delimiter: ;
      # Uncomment action to automatically generate the database sql schema file
      javax:
        persistence:
          schema-generation:
            scripts:
              #action: create
              create-target: src/main/resources/study.sql
              create-source: metadata

  data:
    elasticsearch:
      enabled: false
      host: elasticsearch
      port: 9200
      client:
        timeout: 60  # Seconds
  # disable reactive client autoconfiguration because we don't use it and it is
  # not configured so it tries to connect to localhost which fails. This means
  # we get an ugly error message at startup, and more importantly that the
  # health probes fail, so things like k8s think the server is not working and
  # don't route traffic to it and keep the previous deployment. We have to do
  # this because the reactiveclient is automatically used by springboot when
  # starter-webflux is used.
  autoconfigure:
    exclude:
      - org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticSearchReactiveHealthContributorAutoConfiguration
      - org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration
      - org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration

network-store-server:
  preloading-strategy: COLLECTION

# this structure is shared among all microservices, if you change it, change it everywhere.
# customQuery allows a microservice to set query parameters specific to itself.
# if customQuery is empty, set queryBegin to "?", otherwise set it to "&".
# this allow the user to add additional query elements common to all microservices
# and to use the appropriate leading character depending on whether the microsevice
# uses custom query parameters or not. customQueryBegin in this file must always be '?',
# it is present only to be able to be overriden by deployments in the
# manyschemas mode. It is used only for microservices that have predefined
# query parameters, and it must be used if customQuery is not empty, otherwise
# the manyschema mode doesn't work, so define it everywhere because it doesn't
# hurt.
queryBegin: '?'
customQueryBegin: '?'
customQuery:
dbName: study
dbApi: jdbc
